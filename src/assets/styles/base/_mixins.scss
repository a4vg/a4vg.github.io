@mixin resize-aspect-ratio($height) {
  height: $height;
  width: auto;
}
@mixin two-column-content($leftWidth, $rightWidth: calc(100% - #{$leftWidth})) {
  width:100%;
  &>:nth-child(2n-1) {
    width: $leftWidth;
    float: left;
  }
  &>:nth-child(2n) {
    width: $rightWidth;
    float: left;
  }
}

@mixin scrolling-wrapper {
  white-space: nowrap;
  overflow-x: scroll;
  overflow-y: hidden;
  & > div {
    display: inline-block;
    margin-right: 1em;
  }
}

@mixin smooth-hover-anim($color, $speed, $property) {
  transition: $property $speed;
  &:hover {
    #{$property}: $color;
  }
}

@mixin absolute-center {
  transform: translateX(-50%);
  left: 50%;
}

@mixin block-center {
  margin-left: auto;
  margin-right: auto;
}

@mixin squared-size($size) {
  height: $size;
  width: $size;
}


@mixin top-tooltip($color, $text-color, $font: inherit, $margin-top: -10px) {
  position: relative;

  &:before, &:after {
    position: absolute;
    z-index: 1;

    // Top center
    top: 0;
    left: 50%;
    transform: translateY(-100%) translateX(-50%);

    // For the animation
    visibility: hidden;
    opacity: 0;
    transition: opacity .5s, visibility .5s 0s;
  }

  &:hover{
    &:before, &:after {
      opacity: 1;
      visibility: visible;
    }
  }

  &:before {
    display: inline-block; // take content size
    content: attr(data-text); // attribute data-text is set in html
    text-align:center;
    padding:5px;
    margin-top: $margin-top;
    background-color: $color;
    color: $text-color;
    font-family: $font;
    border-radius: 5px;
  }

  &:after {
    content: " ";
    border-width: -($margin-top / 2);
    border-style: solid;
    border-color: $color transparent transparent transparent;
  }
}

/* Breakpoints */
@mixin from($size) {
  @media only screen and (min-width: map-get($screen-bp-min, $size)){
    @content
  }
}

@mixin up-to($size) {
  @media only screen and (max-width: map-get($screen-bp-max, $size)){
    @content
  }
}

@mixin only-on($size) {
  @media only screen
    and (min-width: map-get($screen-bp-min, $size))
    and (max-width: map-get($screen-bp-max, $size))
  {
    @content
  }
}

@mixin from-custom-screen($bp) {
  @media (min-width: $bp){
    @content
  }
}

@mixin up-to-custom-screen($bp) {
  @media (max-width: $bp){
    @content
  }
}


/** From: https://blog.prototypr.io/how-i-theme-my-react-app-with-sass-414e8f905541
 *
 * theme-aware - Change value of a css property based on the currently active theme
 *
 * @param  {key}     CSS property
 * @param  {value}   Value name defined in the themes under _themes.scss
 *
 * @example - @include theme-aware('background', 'color-background', $themes);
 * @returns - background: #FFF;
 */
@mixin theme-aware($key, $value, $themes) {
    // #{$key}: map-get(map-get($themes, $theme-name), $value)
    @each $theme-name, $theme-color in $themes {
        .theme-#{$theme-name} & {
            #{$key}: map-get(map-get($themes, $theme-name), $value)
        }
    }
};